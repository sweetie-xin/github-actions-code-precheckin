name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # 代码质量检查
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Generate package-lock.json
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found, generating..."
          npm install --package-lock-only
          echo "Generated package-lock.json:"
          ls -la package-lock.json || echo "Failed to generate package-lock.json"
        else
          echo "package-lock.json already exists"
        fi
        
        echo "Final check - package-lock.json exists:"
        ls -la package-lock.json || echo "package-lock.json still missing!"
        
    - name: Install dependencies
      run: |
        chmod +x scripts/install-deps.sh
        ./scripts/install-deps.sh
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Run Prettier check
      run: npm run format:check
      
    - name: Run TypeScript type check
      run: npm run type-check
      
    - name: Run security audit
      run: npm audit --audit-level=moderate

  # 单元测试
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Generate package-lock.json
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found, generating..."
          npm install --package-lock-only
          echo "Generated package-lock.json:"
          ls -la package-lock.json || echo "Failed to generate package-lock.json"
        else
          echo "package-lock.json already exists"
        fi
        
        echo "Final check - package-lock.json exists:"
        ls -la package-lock.json || echo "package-lock.json still missing!"
        
    - name: Install dependencies
      run: |
        # 尝试使用 npm ci
        if npm ci; then
          echo "Dependencies installed successfully with npm ci"
        else
          echo "npm ci failed, trying npm install with legacy peer deps..."
          if npm install --legacy-peer-deps; then
            echo "Dependencies installed successfully with --legacy-peer-deps"
          else
            echo "Legacy install failed, trying with --force..."
            npm install --force
          fi
        fi
      
    - name: Run unit tests
      run: npm run test:ci
      
    - name: Run test coverage
      run: npm run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella
        
    - name: Run integration tests
      run: npm run test:integration

  # 集成测试
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Generate package-lock.json
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found, generating..."
          npm install --package-lock-only
          echo "Generated package-lock.json:"
          ls -la package-lock.json || echo "Failed to generate package-lock.json"
        else
          echo "package-lock.json already exists"
        fi
        
        echo "Final check - package-lock.json exists:"
        ls -la package-lock.json || echo "package-lock.json still missing!"
        
    - name: Install dependencies
      run: |
        # 尝试使用 npm ci
        if npm ci; then
          echo "Dependencies installed successfully with npm ci"
        else
          echo "npm ci failed, falling back to npm install"
          npm install
        fi
      
    - name: Run integration tests
      run: npm run test:integration

  # 构建
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: integration-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Generate package-lock.json
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        if [ ! -f package-lock.json ]; then
          echo "package-lock.json not found, generating..."
          npm install --package-lock-only
          echo "Generated package-lock.json:"
          ls -la package-lock.json || echo "Failed to generate package-lock.json"
        else
          echo "package-lock.json already exists"
        fi
        
        echo "Final check - package-lock.json exists:"
        ls -la package-lock.json || echo "package-lock.json still missing!"
        
    - name: Install dependencies
      run: |
        # 尝试使用 npm ci
        if npm ci; then
          echo "Dependencies installed successfully with npm ci"
        else
          echo "npm ci failed, falling back to npm install"
          npm install
        fi
      
    - name: Build application
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-files
        path: dist/
        retention-days: 7

  # 部署到测试环境
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # 这里添加您的部署脚本
        # 例如: npm run deploy:staging

  # 部署到生产环境
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: dist/
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # 这里添加您的部署脚本
        # 例如: npm run deploy:production
